pipeline {
    agent any

    environment {
        CLIENT_DOCKER_IMAGE = 'oumaymaii/soutenance-app-client-jenkins'
        SERVER_DOCKER_IMAGE = 'oumaymaii/soutenance-app-server-jenkins'
        DOCKER_TAG = 'latest'
        KUBE_CONFIG = "/home/oumayma/.kube/config"
        KUBECONFIG = credentials('kubernetes')
        KUBE_NAMESPACE = 'jenkins-agents'
    }

    stages {
        stage('Build and Push Docker Images') {
            steps {
                script {
                    // Build and push the client-side Docker image
                    sh "docker build -t ${CLIENT_DOCKER_IMAGE}:${DOCKER_TAG} -f ./client/dockerfile ./client"
                    withDockerRegistry([credentialsId: 'b33e1e9a-3f1a-4926-9a8b-4763f9c1340e', url: 'https://index.docker.io/v1/']) {
                        sh "docker push ${CLIENT_DOCKER_IMAGE}:${DOCKER_TAG}"
                    }

                    // Build and push the server-side Docker image
                    sh "docker build -t ${SERVER_DOCKER_IMAGE}:${DOCKER_TAG} -f ./server/dockerfile ./server"
                    withDockerRegistry([credentialsId: 'b33e1e9a-3f1a-4926-9a8b-4763f9c1340e', url: 'https://index.docker.io/v1/']) {
                        sh "docker push ${SERVER_DOCKER_IMAGE}:${DOCKER_TAG}"
                    }
                }
            }
        }

        stage('Debugging') {
            steps {
                // Print the value of KUBECONFIG
                sh 'echo "KUBECONFIG: $KUBECONFIG"'

                // Print the current context and other information
                sh 'kubectl config view'

                // Print the current context
                sh 'kubectl config current-context'

                // Print the list of contexts
                sh 'kubectl config get-contexts'

                // Print the list of clusters
                sh 'kubectl config get-clusters'

                // Print the list of users
                sh 'kubectl config get-users'

                // Run other kubectl commands for debugging
                sh 'kubectl get pods -n jenkins-agents'
                sh 'kubectl version'
                sh 'echo $KUBECONFIG'
                sh 'minikube status'
                 sh 'minikube profile minikube'
                // Add more debugging commands as needed
            }
        }

        stage('Deploy to Minikube') {
            steps {
                script {
                    // Use the existing KUBE_CONFIG environment variable
                    def kubeConfigFile = env.KUBE_CONFIG

                    // Apply Kubernetes deployment and service YAML files in the specified namespace
                    sh "KUBECONFIG=${kubeConfigFile} kubectl apply -f kubernetes/deployment.yaml -n ${KUBE_NAMESPACE}"
                    sh "KUBECONFIG=${kubeConfigFile} kubectl apply -f kubernetes/service.yaml -n ${KUBE_NAMESPACE}"
                }
            }
        }
    }
}
