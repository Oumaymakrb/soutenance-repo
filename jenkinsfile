pipeline {
    agent any

    environment {
        CLIENT_DOCKER_IMAGE = 'oumaymaii/soutenance-app-client-jenkins'
        SERVER_DOCKER_IMAGE = 'oumaymaii/soutenance-app-server-jenkins'
        DOCKER_TAG = 'latest'
        KUBE_CONFIG = '/var/lib/jenkins/workspace/soutenance-pipeline-CICD/.kube/config'
        KUBE_NAMESPACE = 'jenkins-agents'
    }

    stages {
        stage('Build and Push Docker Images') {
            steps {
                script {
                    // Build and push the client-side Docker image
                    sh "docker build -t ${CLIENT_DOCKER_IMAGE}:${DOCKER_TAG} -f ./client/dockerfile ./client"
                    withDockerRegistry([credentialsId: 'b33e1e9a-3f1a-4926-9a8b-4763f9c1340e', url: '']) {
                        sh "docker push ${CLIENT_DOCKER_IMAGE}:${DOCKER_TAG}"
                    }

                    // Build and push the server-side Docker image
                    sh "docker build -t ${SERVER_DOCKER_IMAGE}:${DOCKER_TAG} -f ./server/dockerfile ./server"
                    withDockerRegistry([credentialsId: 'b33e1e9a-3f1a-4926-9a8b-4763f9c1340e', url: '']) {
                        sh "docker push ${SERVER_DOCKER_IMAGE}:${DOCKER_TAG}"
                    }
                }
            }
        }

        stage('Deploy to Minikube') {
            steps {
                script {
                    // Authenticate with Kubernetes using the kubeconfig file
                    def kubeConfig = readFile(KUBE_CONFIG)

                    // Write the kubeconfig to a temporary file for kubectl to use
                    def kubeConfigFile = writeFile(file: 'kubeconfig', text: kubeConfig)

                    // Apply Kubernetes deployment and service YAML files in the specified namespace
                    sh "KUBECONFIG=${kubeConfigFile} kubectl apply -f kubernetes/deployment.yaml -n ${KUBE_NAMESPACE}"
                    sh "KUBECONFIG=${kubeConfigFile} kubectl apply -f kubernetes/service.yaml -n ${KUBE_NAMESPACE}"

                    // Clean up the temporary kubeconfig file
                    sh "rm ${kubeConfigFile}"
                }
            }
        }
    }
}
