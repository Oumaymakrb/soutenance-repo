pipeline {
    agent any

    environment {
        CLIENT_DOCKER_IMAGE = 'oumaymaii/soutenance-app-client-jenkins'
        SERVER_DOCKER_IMAGE = 'oumaymaii/soutenance-app-server-jenkins'
        DOCKER_TAG = 'latest' // Consider using a versioned tag
        KUBE_NAMESPACE = 'jenkins-agents' // Replace with your Kubernetes namespace
    }

    stages {
        stage('Build and Push Docker Images') {
            steps {
                script {
                    // Build and push the client-side Docker image
                    sh "docker build -t ${CLIENT_DOCKER_IMAGE}:${DOCKER_TAG} -f ./client/dockerfile ./client"
                    withDockerRegistry([credentialsId: 'b33e1e9a-3f1a-4926-9a8b-4763f9c1340e', url: '']) {
                        sh "docker push ${CLIENT_DOCKER_IMAGE}:${DOCKER_TAG}"
                    }

                    // Build and push the server-side Docker image
                    sh "docker build -t ${SERVER_DOCKER_IMAGE}:${DOCKER_TAG} -f ./server/dockerfile ./server"
                    withDockerRegistry([credentialsId: 'b33e1e9a-3f1a-4926-9a8b-4763f9c1340e', url: '']) {
                        sh "docker push ${SERVER_DOCKER_IMAGE}:${DOCKER_TAG}"
                    }
                }
            }
        }

      stage('Deploy to Minikube') {
    steps {
        script {
            // Authenticate with Kubernetes using the Jenkins credentials
            def kubeConfig = credentials('ID123')

            // Create Kubernetes configuration file
            sh """
                echo 'apiVersion: v1
                kind: Config
                clusters:
                - cluster:
                    server: https://localhost:8443
                    insecure-skip-tls-verify: true
                  name: minikube
                users:
                - name: jenkins
                  user:
                    token: ${kubeConfig}
                contexts:
                - context:
                    cluster: minikube
                    user: jenkins
                    namespace: ${KUBE_NAMESPACE}
                  name: jenkins
                current-context: jenkins' > /tmp/config
            """

            // Use the created configuration file for kubectl
            sh "kubectl --kubeconfig=/tmp/config get pods"
        }
    }
}

    }
}
