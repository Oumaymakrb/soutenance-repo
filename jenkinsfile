pipeline {
    agent any

    environment {
        CLIENT_DOCKER_IMAGE = 'oumaymaii/soutenance-app-client-jenkins'
        SERVER_DOCKER_IMAGE = 'oumaymaii/soutenance-app-server-jenkins'
        DOCKER_TAG = 'latest' // Consider using a versioned tag
        KUBE_NAMESPACE = 'jenkins-agents' // Replace with your Kubernetes namespace
    }

    stages {
        stage('Build and Push Docker Images') {
            steps {
                script {
                    // Build and push the client-side Docker image
                    sh "docker build -t ${CLIENT_DOCKER_IMAGE}:${DOCKER_TAG} -f ./client/dockerfile ./client"
                    withDockerRegistry([credentialsId: 'b33e1e9a-3f1a-4926-9a8b-4763f9c1340e', url: '']) {
                        sh "docker push ${CLIENT_DOCKER_IMAGE}:${DOCKER_TAG}"
                    }

                    // Build and push the server-side Docker image
                    sh "docker build -t ${SERVER_DOCKER_IMAGE}:${DOCKER_TAG} -f ./server/dockerfile ./server"
                    withDockerRegistry([credentialsId: 'b33e1e9a-3f1a-4926-9a8b-4763f9c1340e', url: '']) {
                        sh "docker push ${SERVER_DOCKER_IMAGE}:${DOCKER_TAG}"
                    }
                }
            }
        }

stage('Deploy to Minikube') {
    steps {
        script {
            try {
                // Debugging: Log kubeconfig file contents
                sh "cat /path/to/your/kubeconfig/file"

                // Authenticate with Kubernetes using the Jenkins credentials
                def kubeConfig = credentials('83a90641-88a6-47e8-8c69-d91c00315970')

                // Debugging: Log cluster URL
                echo "Cluster URL: ${kubeConfig.server}"

                // Apply Kubernetes deployment and service YAML files in the specified namespace
                sh "kubectl apply -f kubernetes/deployment.yaml -n ${KUBE_NAMESPACE}"
                sh "kubectl apply -f kubernetes/service.yaml -n ${KUBE_NAMESPACE}"

                // Log success
                echo "Deployment to Minikube completed successfully."
            } catch (Exception e) {
                // Handle and log errors
                currentBuild.result = 'FAILURE'
                error("Deployment to Minikube failed: ${e.message}")
            }
        }
    }
}


    }
}
